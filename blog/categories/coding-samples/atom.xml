<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Coding Samples | Builder's notes]]></title>
  <link href="http://erick2red.github.com/blog/categories/coding-samples/atom.xml" rel="self"/>
  <link href="http://erick2red.github.com/"/>
  <updated>2013-07-17T13:11:09-04:00</updated>
  <id>http://erick2red.github.com/</id>
  <author>
    <name><![CDATA[Erick Pérez Castellanos]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DBus in the Shell]]></title>
    <link href="http://erick2red.github.com/blog/2011/06/05/dbus-in-the-shell/"/>
    <updated>2011-06-05T01:09:27-04:00</updated>
    <id>http://erick2red.github.com/blog/2011/06/05/dbus-in-the-shell</id>
    <content type="html"><![CDATA[<p>As a companion of the post <a href="http://erick2red.wordpress.com/2011/05/28/dbus-in-gjs-and-gnome-shell/">I made before</a> on connecting to DBus exported objects on Gjs JavaScript runtime over the Shell, should be other post talking as how to export object over DBus inside Shell JavaScript environment. More or less this one is about that.</p>

<p>The code I will show here isn't mine, even I think I contribute some part to it, the main architecture of the thing was already made by the time the code get to me. That part of thanks for the help, and the guidance should go to Vamsi Krishna Brahmajosyula.</p>

<p>So, let’s get our hands dirty</p>

<p>First you need to create the interface you will export, similar to the way you made before for getting proxy objects.</p>

<p>[sourcecode language="javascript"]
const LoggerIface = {</p>

<pre><code>name: 'org.gnome.Logger',
methods: [{
            name: 'log',
            inSignature: 's',
            outSignature: ''
          }
       ],
signals: [{
            name: 'added',
            inSignature: 's'
        }],
properties: []
</code></pre>

<p>};
[/sourcecode]</p>

<p>As you can see, we'll planning to create an object exporting one method 'Logger::log' and one signal 'Logger::added'. The method has one parameter and no return value, and the signal has one arguments, in both cases the argument/parameters is the same, the message log sent. So, our objects will have and array of log messages sent to him, and for every time you call its method 'log' it emit the signal added. Very simple.</p>

<p>Now we'll create the object conforming the interface we defined before.</p>

<p>[sourcecode language="javascript"]
function Logger() {</p>

<pre><code>this._init();
</code></pre>

<p>}</p>

<p>Logger.prototype = {</p>

<pre><code>_init: function() {
    this.logs = [];
    DBus.session.exportObject('/org/gnome/Logger', this);
},

log: function(message) {
    this.logs.push(message);
    global.log('Received: ' + message);
    this._emitAdded(message);
},

_emitAdded: function(message) {
    DBus.session.emit_signal('/org/gnome/Logger',
                             'org.gnome.Logger',
                             'Added', 's',
                             [message]);
}
</code></pre>

<p>};
[/sourcecode]</p>

<p>As you see we defined a method with the same name we did in the interface and the same signature. And now we'll pass to see the Gjs DBus magic:</p>

<p>[sourcecode language="javascript"]
DBus.session.exportObject('/org/gnome/Logger', this);
[/sourcecode]</p>

<p>This was called inside our _init method, and that’s the method of the Gjs telling DBus, this is the object we want to export. And, later on this one is the one telling DBus to check if our class/prototype conforms the interface we said it conforms:</p>

<p>[sourcecode language="javascript"]
DBus.conformExport(Logger.prototype, LoggerIface);
[/sourcecode]</p>

<p>Finally the extension entry point. Ohh wait I didn’t said that before, we’re reviewing an extension, as this is a so easy way to test Gnome 3 stuff. So the entry point, the main function.</p>

<p>[sourcecode language="javascript"]
function main() {</p>

<pre><code>// I did this to get the object after the extension code run
Main.logger = new Logger()

//this was the missing instruction
DBus.session.acquire_name('org.gnome.Logger', 0, null, null);
</code></pre>

<p>}
[/sourcecode]</p>

<p>And here is a great trick, you see that line saying "this was the missing instruction", yeah I had all the code written and reviewed like a thousand times, and still doesn't worked, I keep testing but nothing the object wasn't there. I opened Looking Glass, and typed Main.logger and the object was create, but it wasn't receiving any notice when I called the method, actually I was getting errors cause that method doesn't existed at all. After some back and forward between DBus documentation, and Gnome Shell source code, I figured out. The missing part was, of course, I’ve should known, the part when your object grab the DBus name it want to publish. So first I went to <strong>DBus.session.own_name</strong> but that is not a function, and then I tried this one <strong>DBus.session.acquire_name</strong>, with doesn't exist at all in the devhelp documentation but it seems is the wrapper of Gjs for the <strong>own_name</strong> GDBus method.</p>

<p>So, that’s all for now. I know I’m still missing some things. I want to learn how catch a signal emit over DBus, and how to handle exported object properties, make some samples and toy with it a bit.</p>

<p>But that will be later. Keep in touch.</p>

<p>BTW: I'm still figuring out how to publish the full examples, but I will do it, sometime</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DBus in Gjs and Gnome Shell]]></title>
    <link href="http://erick2red.github.com/blog/2011/05/28/dbus-in-gjs-and-gnome-shell/"/>
    <updated>2011-05-28T21:52:58-04:00</updated>
    <id>http://erick2red.github.com/blog/2011/05/28/dbus-in-gjs-and-gnome-shell</id>
    <content type="html"><![CDATA[<h6>The Story</h6>

<p>Last few days I’ve got a bunch of ideas about Gnome Shell extensions. Gnome 3 platform has made the development of Gnome really close to the public, more than anything by using JavaScript to made the Shell.</p>

<p>The use of JavaScript has lower the barrier for making contributions for Gnome Desktop, because JavaScript it's a well known language in the web development world an it’s a easier language to learn than the typical C/C++ and even Python. There’s still some things to address about the use of JavaScript, the definition and standardization of an engine for use in the gnome development (look at this discussion about the use of <a href="http://live.gnome.org/Seed">Seed</a> or <a href="http://live.gnome.org/Gjs">Gjs</a> [1]), the stabilization of some interfaces in the actual engines, but there’s a lot of way made already.</p>

<p>About standardization and stabilization of interfaces goes this post. <a href="http://dbus.freedesktop.org">DBus</a> is a clever way of communication between process that has become almost a must have for every desktop application for providing services and hooks to internals API, the JavaScript engine powering Gnome Shell then, needs a DBus interface and here comes the problem.</p>

<p>When I realize of my need of using DBus when writing some Gnome-Shell extension I go through the process of selecting which DBus interface I will use. First I decide to use GLib <a href="http://developer.gnome.org/gio/2.26/gdbus.html">GDBus</a> interface since it goes inside GLib, so no matters which JavaScript engine you use, as long as it has GLib bindings it should work. I avoid the low-level interfaces, and I got the Devhelp documentation to work with so, It just left start coding.</p>

<p>After a while I realize that not everything worked as I thought, first and the biggest problem I had was the need of using GLib.Variant in JavaScript to define the signature of the methods you call over DBus and the fact the Gjs not implement GLib.Variant support or at least as long as I can find. I tried with almost every method declared in the GLib-2.0.gir file which is suppose to provide the introspection data, no one works. After asking in the JavaScript mailing list, and got no answer, I decide I should give up and use DBus interface provided by Gjs.</p>

<h6>The Code</h6>

<p>After looking around, I decide to go the only way, reading Gnome Shell code.</p>

<p>For calling a method exported over DBus using Gjs the first is import (include, load the code) the unit containing the DBus interface</p>

<pre><code>&lt;span class="kwrd"&gt;const&lt;/span&gt; DBus = imports.dbus;
</code></pre>

<p>This code loads the JavaScript file dbus.js. After that you need to declare the interface you’re trying to reach and the signature of the methods you’re planning to call</p>

<pre><code>&lt;span class="kwrd"&gt;const&lt;/span&gt; NotificationRemoteInterface = {
    name: &lt;span class="str"&gt;'org.freedesktop.Notifications'&lt;/span&gt;, &lt;span class="rem"&gt;//interface name&lt;/span&gt;
    methods: [
        {    &lt;span class="rem"&gt;//method name and signature&lt;/span&gt;
            name: &lt;span class="str"&gt;'Notify'&lt;/span&gt;,
            inSignature: &lt;span class="str"&gt;'susssasa{sv}i'&lt;/span&gt;,
            outSignature: &lt;span class="str"&gt;'u'&lt;/span&gt;
        }
    ]
};
</code></pre>

<p>Now it comes the Gjs-DBus implementation magic, you need to call this method from DBus object tha makes a class of the proxy object you’ll need to instantiate</p>

<pre><code>let NotificationProxy = DBus.makeProxyClass(NotificationRemoteInterface);
</code></pre>

<p>After that you’ll be ready to get the proxy object and and call its method, or at least the ones you declared.</p>

<pre><code>    let notification_proxy = &lt;span class="kwrd"&gt;new&lt;/span&gt; NotificationProxy(DBus.session,
                                                    &lt;span class="str"&gt;'org.freedesktop.Notifications'&lt;/span&gt;,
                                                    &lt;span class="str"&gt;'/org/freedesktop/Notifications'&lt;/span&gt;);
    notification_proxy.NotifyRemote(&lt;span class="str"&gt;'my_app_sample'&lt;/span&gt;,    &lt;span class="rem"&gt;//these are the params of the method called&lt;/span&gt;
                                    0,
                                    &lt;span class="str"&gt;'dialog-info'&lt;/span&gt;,
                                    &lt;span class="str"&gt;'Summary of the notification'&lt;/span&gt;,
                                    &lt;span class="str"&gt;'Big Body of the sample Notification'&lt;/span&gt;,
                                    [],
                                    {},
                                    120,
                                    &lt;span class="kwrd"&gt;function&lt;/span&gt;(result, err){
                                        log(&lt;span class="str"&gt;'This is the result: '&lt;/span&gt; + result);
                                        log(&lt;span class="str"&gt;'This is the error: '&lt;/span&gt; + err);
    });
</code></pre>

<p>Well, and that’s it. After that you called the method and you have the callback set there, so you can what you want with the returned values.</p>

<h6>The conclusion</h6>

<p>I know there still a bunch of stuff you can make with DBus, but this is a start. There’re still watching for a bus name, and watching for signals and properties changes. It will come soon, I hope.</p>

<hr />

<p>[1] <a href="http://mail.gnome.org/archives/desktop-devel-list/2011-April/msg00147.html">Gjs vs Seed</a></p>
]]></content>
  </entry>
  
</feed>
